I"4<h1 id="14503-로봇-청소기">[14503] 로봇 청소기</h1>

<p>Algorithm: 시뮬레이션
Created: Apr 04, 2020 4:52 AM
DoubleChk: No
Type: 백준
link: https://www.acmicpc.net/problem/14503</p>

<h2 id="문제">문제</h2>

<p>로봇 청소기가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.</p>

<p>로봇 청소기가 있는 장소는 N×M 크기의 직사각형으로 나타낼 수 있으며, 1×1크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸이다. 청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북중 하나이다. 지도의 각 칸은 (r, c)로 나타낼 수 있고, r은 북쪽으로부터 떨어진 칸의 개수, c는 서쪽으로 부터 떨어진 칸의 개수이다.</p>

<p>로봇 청소기는 다음과 같이 작동한다.</p>

<ol>
  <li>현재 위치를 청소한다.</li>
  <li>현재 위치에서 현재 방향을 기준으로 왼쪽방향부터 차례대로 탐색을 진행한다.
    <ol>
      <li>왼쪽 방향에 아직 청소하지 않은 공간이 존재한다면, 그 방향으로 회전한 다음 한 칸을 전진하고 1번부터 진행한다.</li>
      <li>왼쪽 방향에 청소할 공간이 없다면, 그 방향으로 회전하고 2번으로 돌아간다.</li>
      <li>네 방향 모두 청소가 이미 되어있거나 벽인 경우에는, 바라보는 방향을 유지한 채로 한 칸 후진을 하고 2번으로 돌아간다.</li>
      <li>네 방향 모두 청소가 이미 되어있거나 벽이면서, 뒤쪽 방향이 벽이라 후진도 할 수 없는 경우에는 작동을 멈춘다.</li>
    </ol>
  </li>
</ol>

<p>로봇 청소기는 이미 청소되어있는 칸을 또 청소하지 않으며, 벽을 통과할 수 없다.</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 50)</p>

<p>둘째 줄에 로봇 청소기가 있는 칸의 좌표 (r, c)와 바라보는 방향 d가 주어진다. d가 0인 경우에는 북쪽을, 1인 경우에는 동쪽을, 2인 경우에는 남쪽을, 3인 경우에는 서쪽을 바라보고 있는 것이다.</p>

<p>셋째 줄부터 N개의 줄에 장소의 상태가 북쪽부터 남쪽 순서대로, 각 줄은 서쪽부터 동쪽 순서대로 주어진다. 빈 칸은 0, 벽은 1로 주어진다. 지도의 첫 행, 마지막 행, 첫 열, 마지막 열에 있는 모든 칸은 벽이다.</p>

<p>로봇 청소기가 있는 칸의 상태는 항상 빈 칸이다.</p>

<h2 id="출력">출력</h2>

<p>로봇 청소기가 청소하는 칸의 개수를 출력한다.</p>

<hr />
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>    <span class="cp">#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
</span>    <span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span>    <span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">ans</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">room</span><span class="p">[</span><span class="mi">51</span><span class="p">][</span><span class="mi">51</span><span class="p">];</span>
    <span class="c1">//0북 1동 2남 3서</span>
    <span class="kt">int</span> <span class="n">dx</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
    <span class="kt">int</span> <span class="n">dy</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">};</span>
    
    <span class="kt">void</span> <span class="nf">input</span><span class="p">(){</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">M</span><span class="p">;</span>
        <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">r</span> <span class="o">&gt;&gt;</span> <span class="n">c</span> <span class="o">&gt;&gt;</span> <span class="n">d</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">M</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
                <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">room</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="nf">changeDir</span><span class="p">(</span><span class="kt">int</span> <span class="n">d</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">d</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">3</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">d</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">d</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">void</span> <span class="nf">solve</span><span class="p">(){</span>
    
       <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
    
           <span class="kt">bool</span> <span class="n">cleaned</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    
           <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
               <span class="kt">int</span> <span class="n">nd</span> <span class="o">=</span> <span class="n">changeDir</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
               <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">r</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">nd</span><span class="p">];</span>
               <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">c</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">nd</span><span class="p">];</span>
               <span class="n">d</span> <span class="o">=</span> <span class="n">nd</span><span class="p">;</span>
    
               <span class="k">if</span><span class="p">(</span><span class="n">room</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
                   <span class="n">room</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
                   <span class="n">ans</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
                   <span class="n">r</span> <span class="o">=</span> <span class="n">nx</span><span class="p">;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">ny</span><span class="p">;</span>
                   <span class="n">cleaned</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                   <span class="k">break</span><span class="p">;</span>
               <span class="p">}</span>
           <span class="p">}</span>
    
           <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">cleaned</span><span class="p">){</span>
               <span class="kt">int</span> <span class="n">back_r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-</span> <span class="n">dx</span><span class="p">[</span><span class="n">d</span><span class="p">];</span>
               <span class="kt">int</span> <span class="n">back_c</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="n">dy</span><span class="p">[</span><span class="n">d</span><span class="p">];</span>
               <span class="k">if</span><span class="p">(</span><span class="n">room</span><span class="p">[</span><span class="n">back_r</span><span class="p">][</span><span class="n">back_c</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
                   <span class="k">return</span><span class="p">;</span>
               <span class="p">}</span>
               <span class="k">else</span> <span class="p">{</span>
                   <span class="n">r</span> <span class="o">=</span> <span class="n">back_r</span><span class="p">;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">back_c</span><span class="p">;</span>
               <span class="p">}</span>
           <span class="p">}</span>
       <span class="p">}</span>
    
    <span class="p">}</span>
    <span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    
        <span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
        <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span> <span class="n">cout</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    
        <span class="n">input</span><span class="p">();</span>
        <span class="n">room</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    
        <span class="n">solve</span><span class="p">();</span>
    
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>
    <p>문제 풀이</p>

    <p>간단한 시뮬레이션 문제.</p>

    <p>동서남북 처리하기가 머리아팠다.</p>

    <p><img width="606" alt="스크린샷 2020-04-04 오전 4 52 43" src="https://user-images.githubusercontent.com/41617388/78399957-d575db00-7630-11ea-8285-1bd3de91477a.png" /></p>

    <p>계속해서 왼쪽으로 돌기 때문에 북→서→남→동→북.. 이 순서대로 배열을 만들어주면 된다.</p>

    <p>flag를 두어 동, 서, 남, 북 모두를 탐색 해도 길이 없을 경우를 표현해준다.</p>

    <p>후진을 해도 길이 없으면 함수를 끝내준다.</p>
  </li>
</ul>
:ET
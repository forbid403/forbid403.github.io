I"≈6<h2 id="ÌîÑÎ°úÍ∑∏ÎûòÎ®∏Ïä§-Í∏∏-Ï∞æÍ∏∞-Í≤åÏûÑ">[ÌîÑÎ°úÍ∑∏ÎûòÎ®∏Ïä§] Í∏∏ Ï∞æÍ∏∞ Í≤åÏûÑ</h2>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/42892">Î¨∏Ï†ú ÎßÅÌÅ¨</a></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">val</span><span class="p">;</span>
    <span class="n">Node</span> <span class="o">*</span><span class="n">left</span><span class="p">;</span>
    <span class="n">Node</span> <span class="o">*</span><span class="n">right</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Node</span><span class="p">;</span>
<span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pre</span><span class="p">;</span>
<span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">post</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">preOrder</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span> <span class="n">head</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="n">pre</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">num</span><span class="p">);</span>
    <span class="n">preOrder</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
    <span class="n">preOrder</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">postOrder</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span> <span class="n">head</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="n">postOrder</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
    <span class="n">postOrder</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
    <span class="n">post</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">num</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">Node</span> <span class="o">*</span> <span class="nf">createNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">val</span><span class="p">,</span> <span class="kt">int</span> <span class="n">num</span><span class="p">){</span>
    <span class="n">Node</span> <span class="o">*</span><span class="n">newNode</span> <span class="o">=</span> <span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Node</span><span class="p">));</span>
    <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
    <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">num</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
    <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">newNode</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">nodeinfo</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">answer</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nodeinfo</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">nodeinfo</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">nodeinfo</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">nodeinfo</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">cmp</span><span class="p">);</span>

    <span class="n">Node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="n">createNode</span><span class="p">(</span><span class="n">nodeinfo</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">nodeinfo</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">]);</span>
    <span class="kt">int</span> <span class="n">level</span> <span class="o">=</span> <span class="n">nodeinfo</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>  <span class="c1">// 6</span>
    
    <span class="c1">//Ìä∏Î¶¨ Íµ¨ÌòÑ</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nodeinfo</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Node</span> <span class="o">*</span><span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>

        <span class="kt">int</span> <span class="n">now_val</span> <span class="o">=</span> <span class="n">nodeinfo</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">now_level</span> <span class="o">=</span> <span class="n">nodeinfo</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">now_num</span> <span class="o">=</span> <span class="n">nodeinfo</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>

        <span class="c1">//Í∞í ÎπÑÍµê</span>
        <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">val</span> <span class="o">&lt;</span> <span class="n">now_val</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
                <span class="k">else</span> <span class="p">{</span>
                    <span class="n">cur</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">createNode</span><span class="p">(</span><span class="n">now_val</span><span class="p">,</span> <span class="n">now_num</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
                <span class="k">else</span> <span class="p">{</span>
                    <span class="n">cur</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">createNode</span><span class="p">(</span><span class="n">now_val</span><span class="p">,</span> <span class="n">now_num</span><span class="p">);</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">preOrder</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
    <span class="n">postOrder</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>

    <span class="n">answer</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">pre</span><span class="p">);</span>
    <span class="n">answer</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">post</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Ìä∏Î¶¨ Íµ¨ÌòÑ Î¨∏Ï†ú.</li>
  <li>nodeinfoÏóê Îì§Ïñ¥Ïò® ÏàúÏÑúÎ•º Ï∂îÍ∞Ä Ìï¥ Ï§ÄÎã§.</li>
  <li>nodeinfoÎ•º yÍ∞Ä ÌÅ∞ ÏàúÏÑú, xÍ∞Ä ÌÅ∞ ÏàúÏÑúÎåÄÎ°ú Ï†ïÎ†¨ÏùÑ Ìï¥ Ï§ÄÎã§.</li>
  <li>Îã§ÏùåÏùÄ Í∑∏ÎÉ• Ìä∏Î¶¨ Íµ¨ÌòÑ</li>
  <li>Ï†ÑÏúÑÏàúÌöå, ÌõÑÏúÑÏàúÌöå ÏßÑÌñâÌïòÎ©¥ ÎÅù</li>
</ul>
:ET
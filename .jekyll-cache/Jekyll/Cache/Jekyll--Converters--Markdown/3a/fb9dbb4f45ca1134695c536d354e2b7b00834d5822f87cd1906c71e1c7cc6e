I"«:<h2 id="Î∞±Ï§Ä-1194-Îã¨Ïù¥-Ï∞®Ïò§Î•∏Îã§-Í∞ÄÏûê">[Î∞±Ï§Ä 1194] Îã¨Ïù¥ Ï∞®Ïò§Î•∏Îã§, Í∞ÄÏûê.</h2>
<p><a href="https://www.acmicpc.net/problem/1194">Î¨∏Ï†ú ÎßÅÌÅ¨</a></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"header.h"</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">board</span><span class="p">[</span><span class="mi">51</span><span class="p">][</span><span class="mi">51</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">visit</span><span class="p">[</span><span class="mi">51</span><span class="p">][</span><span class="mi">51</span><span class="p">][</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">7</span><span class="p">];</span>
<span class="n">pair</span> <span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">minsik</span><span class="p">;</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="nc">node</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">dis</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">key</span><span class="p">;</span>
<span class="p">}</span><span class="n">node</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">dx</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">dy</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
<span class="kt">void</span> <span class="nf">input</span><span class="p">(){</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">M</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">M</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'0'</span><span class="p">){</span>
                <span class="n">minsik</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">};</span>
                <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'.'</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">solve</span><span class="p">(){</span>

    <span class="n">queue</span> <span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>

    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">minsik</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">minsik</span><span class="p">.</span><span class="n">second</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">});</span>
    <span class="n">visit</span><span class="p">[</span><span class="n">minsik</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">minsik</span><span class="p">.</span><span class="n">second</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="kt">int</span> <span class="n">top_x</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">x</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">top_y</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">y</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">dis</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">dis</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">key</span><span class="p">;</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>

        <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">top_x</span><span class="p">][</span><span class="n">top_y</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'1'</span><span class="p">){</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">dis</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">top_x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">top_y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="n">visit</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">][</span><span class="n">key</span><span class="p">]</span> <span class="o">||</span> <span class="n">board</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span> <span class="o">||</span> <span class="n">nx</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">nx</span> <span class="o">&gt;=</span> <span class="n">N</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&gt;=</span> <span class="n">M</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>

            <span class="k">if</span><span class="p">(</span><span class="n">isupper</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">])){</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'A'</span><span class="p">)){</span>
                    <span class="n">visit</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">][</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">,</span> <span class="n">dis</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">key</span><span class="p">});</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">islower</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">])){</span>
                <span class="kt">int</span> <span class="n">check_key</span> <span class="o">=</span> <span class="n">key</span> <span class="o">|</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'a'</span><span class="p">));</span>
                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">visit</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">][</span><span class="n">check_key</span><span class="p">]){</span>
                    <span class="n">visit</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">][</span><span class="n">check_key</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                    <span class="n">visit</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">][</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">,</span> <span class="n">dis</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">check_key</span><span class="p">});</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">,</span> <span class="n">dis</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">key</span><span class="p">});</span>
                <span class="n">visit</span><span class="p">[</span><span class="n">nx</span><span class="p">][</span><span class="n">ny</span><span class="p">][</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">input</span><span class="p">();</span>
    <span class="n">solve</span><span class="p">();</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>bfs + ÎπÑÌä∏ÎßàÏä§ÌÇπ Î¨∏Ï†ú</li>
  <li>ÏõêÎûòÎäî keyÎûë doorÎ•º mapÏúºÎ°ú Îë¨ÏÑú, ÎπÑÌä∏ÎßàÏä§ÌÇπ ÎåÄÏã† ÏÇ¨Ïö©Ìï¥ Î≥¥Î†§Í≥† ÌñàÎäîÎç∞, ÏÉÅÌÉú Î≥¥Ï°¥Ïù¥ ÌûòÎì§Ïñ¥ÏÑú ÎπÑÌä∏ÎßàÏä§ÌÇπÏùÑ Ï∞∏Í≥†ÌïòÏó¨ ÏÇ¨Ïö©ÌñàÎã§.</li>
  <li>visit Î∞∞Ïó¥Ïùò ÏÑ∏ Î≤àÏß∏ Î∂ÄÎ∂ÑÏù¥ Ïó¥Ïá†Ïù¥Îã§. Ïó¥Ïá†Î•º ÌöçÎìù Ìï† ÎïåÎßàÎã§ Îã§Ïãú ÌÉêÏÉâÌïòÍ∏∞ ÏúÑÌï¥ ÏÇ¨Ïö©Ìï¥Ï§ÄÎã§.</li>
  <li>keyÎ•º Í∞ÄÏßÄÍ≥† ÏûàÎäîÏßÄ ÏóÜÎäîÏßÄÎ•º ÌåêÎ≥ÑÌïòÎ©∞ bfsÎ•º ÎèåÎã§Í∞Ä, 1ÏùÑ ÎßåÎÇòÎ©¥ Í±∞Î¶¨Î•º Ï∂úÎ†• Ìï¥ Ï§ÄÎã§.</li>
</ul>
:ET
I"X<h1 id="top-k-frequent-words">Top K Frequent Words</h1>

<p>Algorithm: 정렬, 해쉬
Created: Feb 08, 2020 11:25 PM
DoubleChk: No
Type: LeetCode
level: 2
link: https://leetcode.com/problems/top-k-frequent-words/</p>

<p>Given a non-empty list of words, return the k most frequent elements.</p>

<p>Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.</p>

<p><strong>Example 1:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
Output: ["i", "love"]
Explanation: "i" and "love" are the two most frequent words.
    Note that "i" comes before "love" due to a lower alphabetical order.
</code></pre></div></div>

<p><strong>Example 2:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
Output: ["the", "is", "sunny", "day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words,
    with the number of occurrence being 4, 3, 2 and 1 respectively.
</code></pre></div></div>

<p><strong>Note:</strong></p>

<ol>
  <li>You may assume k is always valid, 1 ≤ k ≤ number of unique elements.</li>
  <li>Input words contain only lowercase letters.</li>
</ol>

<p><strong>Follow up:</strong></p>

<ol>
  <li>Try to solve it in O(n log k) time and O(n) extra space.</li>
</ol>

<hr />
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
    <span class="nl">public:</span>
        <span class="k">static</span> <span class="kt">bool</span> <span class="n">myCompare</span><span class="p">(</span><span class="k">const</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&amp;</span><span class="n">b</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">second</span><span class="o">==</span><span class="n">b</span><span class="p">.</span><span class="n">second</span><span class="p">)</span>
               <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">first</span><span class="o">&lt;</span><span class="n">b</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">second</span><span class="o">&gt;</span><span class="n">b</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">topKFrequent</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&amp;</span> <span class="n">words</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">unordered_map</span> <span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">str</span> <span class="o">:</span> <span class="n">words</span><span class="p">){</span>
                <span class="n">m</span><span class="p">[</span><span class="n">str</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
            
            <span class="n">vector</span> <span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">temp</span><span class="p">;</span>
            
            <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">:</span> <span class="n">m</span><span class="p">){</span>
                <span class="n">temp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">second</span><span class="p">));</span>
            <span class="p">}</span>
            
            <span class="n">sort</span><span class="p">(</span><span class="n">temp</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">temp</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">myCompare</span><span class="p">);</span>
            
            <span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
                <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">);</span>
    
            <span class="p">}</span>
            
            <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
        <span class="p">}</span>
        
    <span class="p">};</span>
</code></pre></div></div>
<ul>
  <li>
    <p>문제 풀이</p>

    <p>맵으로 string의 갯수를 세어준다.</p>

    <p>value 값으로 정렬을 해야 하기 때문에, vector를 하나 생성 해 복사 해 준다.</p>

    <p>sort에서 compare 함수를 통해 value값을 비교한다.</p>

    <p>만약 갯수가 같다면, string을 비교 해 알파벳 순서가 더 빠른 애로 정렬한다.</p>

    <p>정렬이 끝난 후 정답 벡터에 k만큼 push 한다.</p>
  </li>
  <li>
    <p>후기</p>

    <p>50퍼정도의 속도가 나왔다 더 빨리 푸는 방법이 있으려나</p>
  </li>
</ul>
:ET